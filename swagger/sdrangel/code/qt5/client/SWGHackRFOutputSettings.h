/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube     ---   Limitations and specifcities:       * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Stopping instance i.e. /sdrangel with DELETE method is a server only feature. It allows stopping the instance nicely.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV demodulator, Channel Analyzer, Channel Analyzer NG, LoRa demodulator, TCP source   * The content type returned is always application/json except in the following cases:     * An incorrect URL was specified: this document is returned as text/html with a status 400    --- 
 *
 * OpenAPI spec version: 4.0.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGHackRFOutputSettings.h
 * 
 * HackRF
 */

#ifndef SWGHackRFOutputSettings_H_
#define SWGHackRFOutputSettings_H_

#include <QJsonObject>



#include "SWGObject.h"


namespace SWGSDRangel {

class SWGHackRFOutputSettings: public SWGObject {
public:
    SWGHackRFOutputSettings();
    SWGHackRFOutputSettings(QString* json);
    virtual ~SWGHackRFOutputSettings();
    void init();
    void cleanup();

    QString asJson ();
    QJsonObject* asJsonObject();
    void fromJsonObject(QJsonObject &json);
    SWGHackRFOutputSettings* fromJson(QString &jsonString);

    qint64 getCenterFrequency();
    void setCenterFrequency(qint64 center_frequency);

    qint32 getLOppmTenths();
    void setLOppmTenths(qint32 l_oppm_tenths);

    qint32 getBandwidth();
    void setBandwidth(qint32 bandwidth);

    qint32 getVgaGain();
    void setVgaGain(qint32 vga_gain);

    qint32 getLog2Interp();
    void setLog2Interp(qint32 log2_interp);

    qint32 getDevSampleRate();
    void setDevSampleRate(qint32 dev_sample_rate);

    qint32 getBiasT();
    void setBiasT(qint32 bias_t);

    qint32 getLnaExt();
    void setLnaExt(qint32 lna_ext);


private:
    qint64 center_frequency;
    qint32 l_oppm_tenths;
    qint32 bandwidth;
    qint32 vga_gain;
    qint32 log2_interp;
    qint32 dev_sample_rate;
    qint32 bias_t;
    qint32 lna_ext;
};

}

#endif /* SWGHackRFOutputSettings_H_ */
